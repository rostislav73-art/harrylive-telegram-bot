
import os
import re
import requests
from flask import Flask, request
from openai import OpenAI

app = Flask(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
WEBHOOK_URL = "https://web-production-f7800.up.railway.app/webhook"

client = OpenAI(api_key=OPENAI_API_KEY)

def get_weather(city="Sofia"):
    api_key = OPENWEATHER_API_KEY
    city = city.strip().replace(" ", "%20")
    url = f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{city}?unitGroup=metric&lang=bg&key={api_key}&contentType=json"
    try:
        res = requests.get(url)
        res.raise_for_status()
        data = res.json()
        if "days" not in data:
            return "–ù–µ –º–æ–≥–∞ –¥–∞ –Ω–∞–º–µ—Ä—è –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞ –º—è—Å—Ç–æ."
        day = data["days"][0]
        temp = day["temp"]
        conditions = day["conditions"]
        humidity = day["humidity"]
        return f"–í –º–æ–º–µ–Ω—Ç–∞ –≤ {city} –µ {temp} ¬∞C —Å {conditions}. –í–ª–∞–∂–Ω–æ—Å—Ç—Ç–∞ –µ {humidity}%."
    except Exception as e:
        print("Weather API error:", e)
        return "‚ö†Ô∏è –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–µ–º–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞."

def ask_gpt(message_text):
    if "–≤—Ä–µ–º–µ—Ç–æ" in message_text.lower():
        match = re.search(r'–≤\s+([–ê-–Ø–∞-—èA-Za-z]+)', message_text)
        city = match.group(1) if match else "Sofia"
        return get_weather(city)

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ —Å–∏ –ø–æ–ª–µ–∑–µ–Ω Telegram –±–æ—Ç, –∫–æ–π—Ç–æ –ø–æ–º–∞–≥–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."},
                {"role": "user", "content": message_text}
            ],
            temperature=0.7,
            max_tokens=500,
        )
        return response.choices[0].message.content
    except Exception as e:
        print("OpenAI error:", e)
        return "‚ö†Ô∏è –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å GPT."

def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print("Telegram error:", e)

@app.route("/")
def index():
    return "üßô‚Äç‚ôÇÔ∏è Bot is live! Use /webhook for Telegram updates."

@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    if data and "message" in data and "text" in data["message"]:
        chat_id = data["message"]["chat"]["id"]
        text = data["message"]["text"]
        reply = ask_gpt(text)
        send_message(chat_id, reply)
    return {"ok": True}

def set_webhook():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url={WEBHOOK_URL}"
    try:
        res = requests.get(url)
        print("Webhook set:", res.json())
    except Exception as e:
        print("Failed to set webhook:", e)

set_webhook()

if __name__ == "__main__":
    app.run(debug=True)
