import os
import re
import requests
from flask import Flask, request
from openai import OpenAI
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

app = Flask(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
WEBHOOK_URL = "https://web-production-f7800.up.railway.app/webhook"

bot = telebot.TeleBot(BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ
def get_weather(city="Sofia"):
    api_key = OPENWEATHER_API_KEY
    url = f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{city}?unitGroup=metric&lang=bg&key={api_key}&contentType=json"
    try:
        res = requests.get(url)
        if res.status_code != 200:
            print("Weather API error:", res.text)
            return "‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–µ–º–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ."
        data = res.json()
        if "days" not in data:
            return "‚ö†Ô∏è –ù—è–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞ —Ç–æ–≤–∞ –º—è—Å—Ç–æ."
        day = data["days"][0]
        temp = day.get("temp")
        conditions = day.get("conditions", "").lower()
        humidity = day.get("humidity")

        icons = {
            "rain": "üåßÔ∏è",
            "overcast": "‚òÅÔ∏è",
            "cloud": "‚òÅÔ∏è",
            "clear": "‚òÄÔ∏è",
            "snow": "‚ùÑÔ∏è",
            "thunderstorm": "‚õàÔ∏è"
        }
        weather_icon = "üå°Ô∏è"
        for key, icon in icons.items():
            if key in conditions:
                weather_icon = icon
                break

        return f"{weather_icon} –í –º–æ–º–µ–Ω—Ç–∞ –≤ {city} –µ {temp}¬∞C —Å {conditions}. –í–ª–∞–∂–Ω–æ—Å—Ç—Ç–∞ –µ {humidity}%.",
    except Exception as e:
        print("Weather API exception:", e)
        return "‚ö†Ô∏è –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞."

# –§—É–Ω–∫—Ü–∏—è –∑–∞ —á–∞—Ç —Å GPT

def ask_gpt(message_text):
    if "–≤—Ä–µ–º–µ—Ç–æ" in message_text.lower():
        match = re.search(r'–≤\s+([–ê-–Ø–∞-—èA-Za-z\s]+)', message_text)
        city = match.group(1).strip() if match else "Sofia"
        return get_weather(city)

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ —Å–∏ –ø–æ–ª–µ–∑–µ–Ω Telegram –±–æ—Ç, –∫–æ–π—Ç–æ –ø–æ–º–∞–≥–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."},
                {"role": "user", "content": message_text}
            ],
            temperature=0.7,
            max_tokens=500,
        )
        return response.choices[0].message.content
    except Exception as e:
        print("OpenAI error:", e)
        return "‚ö†Ô∏è –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å GPT."

# –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥–∞ —Å –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üå¶Ô∏è –ü–æ–ø–∏—Ç–∞–π –∑–∞ –≤—Ä–µ–º–µ—Ç–æ", callback_data="weather"))
    markup.add(InlineKeyboardButton("üí¨ –ì–æ–≤–æ—Ä–∏ —Å GPT", callback_data="chatgpt"))
    markup.add(InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â", callback_data="help"))
    bot.send_message(message.chat.id, "–ò–∑–±–µ—Ä–∏ –∫–∞–∫–≤–æ –∏—Å–∫–∞—à –¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—à:", reply_markup=markup)

# Callback –±—É—Ç–æ–Ω–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "weather":
        bot.send_message(call.message.chat.id, "üå¶Ô∏è –ù–∞–ø–∏—à–∏ –∏–º–µ—Ç–æ –Ω–∞ –≥—Ä–∞–¥–∞, –∑–∞ –¥–∞ —Ç–∏ –¥–∞–º –ø—Ä–æ–≥–Ω–æ–∑–∞!")
    elif call.data == "chatgpt":
        bot.send_message(call.message.chat.id, "üí¨ –ü–∏—à–∏ –º–∏ –≤—ä–ø—Ä–æ—Å –∏ —â–µ —Ç–∏ –æ—Ç–≥–æ–≤–æ—Ä—è –∫–∞—Ç–æ GPT-4!")
    elif call.data == "help":
        bot.send_message(call.message.chat.id, 
            "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n\n"
            "üå¶Ô∏è –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ–ø–∏—Ç–∞–π –∑–∞ –≤—Ä–µ–º–µ—Ç–æ' –∏ –Ω–∞–ø–∏—à–∏ –∏–º–µ—Ç–æ –Ω–∞ –≥—Ä–∞–¥, –∑–∞ –¥–∞ –ø–æ–ª—É—á–∏—à –ø—Ä–æ–≥–Ω–æ–∑–∞.\n"
            "üí¨ –ù–∞—Ç–∏—Å–Ω–∏ '–ì–æ–≤–æ—Ä–∏ —Å GPT', –∑–∞ –¥–∞ –º–∏ –∑–∞–¥–∞–¥–µ—à –≤—ä–ø—Ä–æ—Å –∏ —â–µ —Ç–∏ –æ—Ç–≥–æ–≤–æ—Ä—è –∫–∞—Ç–æ ChatGPT.\n"
            "\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∫–∞–∫–≤–æ —Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–≤–∞!")

# –û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    reply = ask_gpt(message.text)
    bot.send_message(message.chat.id, reply)

# Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞
@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
    return {'ok': True}

# –ò–Ω—Ñ–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def index():
    return "ü§ñ Bot is live! Use /webhook for Telegram updates."

# Set webhook
import requests as rq

def set_webhook():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url={WEBHOOK_URL}"
    try:
        res = rq.get(url)
        print("Webhook set:", res.json())
    except Exception as e:
        print("Failed to set webhook:", e)

set_webhook()

if __name__ == "__main__":
    app.run(debug=True)
