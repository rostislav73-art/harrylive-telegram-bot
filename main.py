import os
import json
import requests
import openai
from functools import lru_cache
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from datetime import datetime

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
load_dotenv()

# üîí –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—ä—Å –∑–∞—â–∏—Ç–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ALLOWED_USERS = list(map(int, os.getenv("ALLOWED_USERS", "6255661181").split(",")))  # Default: —Ç–≤–æ—è—Ç chat_id

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –õ–∏–ø—Å–≤–∞—Ç BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env!")

openai.api_key = OPENAI_API_KEY
app = Flask(__name__)
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

# --- –ü–æ–º–æ—â–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@lru_cache(maxsize=100)  # üöÄ –ö–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—â–∏ —Å–µ –∑–∞—è–≤–∫–∏
def get_ai_response(prompt: str) -> str:
    """–ò–∑–ø—Ä–∞—â–∞ –∑–∞—è–≤–∫–∞ –∫—ä–º OpenAI –∏ –≤—Ä—ä—â–∞ –æ—Ç–≥–æ–≤–æ—Ä."""
    try:
        response = openai.chat.completions.create(
            model="gpt-4-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except openai.RateLimitError:
        return "‚ö†Ô∏è –ü—Ä–µ–≤–∏—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ –∑–∞—è–≤–∫–∏. –û–ø–∏—Ç–∞–π —Å–ª–µ–¥ 1 –º–∏–Ω—É—Ç–∞."
    except Exception as e:
        print(f"‚ùå OpenAI –≥—Ä–µ—à–∫–∞: {e}")
        return "‚ö†Ô∏è –í—ä—Ç—Ä–µ—à–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞."

def log_to_file(chat_id: int, request_text: str, response_text: str) -> None:
    """–ó–∞–ø–∏—Å–≤–∞ –ª–æ–≥–æ–≤–µ –≤—ä–≤ —Ñ–∞–π–ª –≤ JSON —Ñ–æ—Ä–º–∞—Ç."""
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "chat_id": chat_id,
        "request": request_text,
        "response": response_text
    }
    with open("logs.json", "a", encoding="utf-8") as f:
        f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")

# --- Flask —Ä—É—Ç–∏ ---
@app.route("/")
def home():
    return "ü§ñ Bot is live! Use /webhook for Telegram updates."

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    print("üì© –ü–æ–ª—É—á–µ–Ω update:", json.dumps(data, indent=2))

    if "message" not in data:
        return jsonify({"ok": True})

    chat_id = data["message"]["chat"]["id"]
    text = data["message"].get("text", "")

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
    if chat_id not in ALLOWED_USERS:
        print(f"üö´ –ù–µ—Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—ä–ø –æ—Ç: {chat_id}")
        return jsonify({"ok": True})

    # ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞
    reply = get_ai_response(text)
    log_to_file(chat_id, text, reply)

    # üì§ –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä –∫—ä–º Telegram (—Å 3 –æ–ø–∏—Ç–∞)
    for attempt in range(3):
        try:
            r = requests.post(
                API_URL,
                json={"chat_id": chat_id, "text": reply},
                headers={"Content-Type": "application/json"},
                timeout=5
            )
            if r.status_code == 200:
                break
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–ø–∏—Ç {attempt + 1}: {e}")

    return jsonify({"ok": True})

# --- –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞ ---
if __name__ == "__main__":
    # üîÑ –ó–∞–¥–∞–≤–∞–Ω–µ –Ω–∞ —É–µ–±—Ö—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ (–∞–∫–æ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –ª–æ–∫–∞–ª–Ω–æ)
    if os.getenv("SET_WEBHOOK", "False").lower() == "true":
        webhook_url = os.getenv("WEBHOOK_URL")
        if webhook_url:
            requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url={webhook_url}/webhook")
    
    app.run(host="0.0.0.0", port=5000, debug=os.getenv("DEBUG", "False") == "True")