import os
import re
import requests
import wikipediaapi
from flask import Flask, request
from openai import OpenAI
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

app = Flask(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
WEBHOOK_URL = "https://web-production-f7800.up.railway.app/webhook"

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='Markdown')
client = OpenAI(api_key=OPENAI_API_KEY)

user_context = {}

wiki_bg = wikipediaapi.Wikipedia(
    user_agent="Harrylive_73Bot/1.0 (https://t.me/Harrylive_73Bot)",
    language='bg'
)
wiki_en = wikipediaapi.Wikipedia(
    user_agent="Harrylive_73Bot/1.0 (https://t.me/Harrylive_73Bot)",
    language='en'
)

def detect_language(text):
    if re.search(r'[–∞-—è–ê-–Ø]', text):
        return 'bg'
    else:
        return 'en'

def search_wikipedia(query):
    lang = detect_language(query)
    wiki = wiki_bg if lang == 'bg' else wiki_en
    page = wiki.page(query)

    if page.exists():
        summary = page.summary
        if len(summary) > 500:
            summary = summary[:500] + "..."
        return f"üìö *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç Wikipedia:*\n\n{summary}"
    else:
        return None

def get_weather(city="Sofia"):
    if not city.strip():
        return "‚ö†Ô∏è *–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ –≤–∞–ª–∏–¥–Ω–æ –∏–º–µ –Ω–∞ –≥—Ä–∞–¥!*"
    url = f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{city}?unitGroup=metric&lang=bg&key={OPENWEATHER_API_KEY}&contentType=json"
    try:
        res = requests.get(url)
        if res.status_code != 200:
            print("Weather API error:", res.text)
            return "‚ö†Ô∏è *–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–µ–º–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ.*"
        data = res.json()
        if "days" not in data:
            return "‚ö†Ô∏è *–ù—è–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞ —Ç–æ–≤–∞ –º—è—Å—Ç–æ.*"
        day = data["days"][0]
        temp = day.get("temp")
        conditions = day.get("conditions", "").lower()
        humidity = day.get("humidity")

        icons = {
            "rain": "üåßÔ∏è", "overcast": "‚òÅÔ∏è", "cloud": "‚òÅÔ∏è",
            "clear": "‚òÄÔ∏è", "snow": "‚ùÑÔ∏è", "thunderstorm": "‚õàÔ∏è"
        }
        weather_icon = "üå°Ô∏è"
        for key, icon in icons.items():
            if key in conditions:
                weather_icon = icon
                break

        return f"{weather_icon} *–í –º–æ–º–µ–Ω—Ç–∞ –≤ {city} –µ {temp}¬∞C —Å {conditions}.*\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç: {humidity}%"
    except Exception as e:
        print("Weather API exception:", e)
        return "‚ö†Ô∏è *–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞.*"

def ask_gpt(chat_id, message_text):
    if not message_text.strip():
        return "‚ö†Ô∏è *–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Å—ä–æ–±—â–µ–Ω–∏–µ!*"
    try:
        bot.send_chat_action(chat_id, 'typing')  # üî• –ü–æ–∫–∞–∑–≤–∞ typing

        history = user_context.get(chat_id, [])
        history.append({"role": "user", "content": message_text})
        history = history[-10:]

        response = client.chat.completions.create(
            model="gpt-4-turbo-2024-04-09",
            messages=[
                {"role": "system", "content": "–¢–∏ —Å–∏ Telegram –±–æ—Ç. –î–Ω–µ—Å –µ –∞–ø—Ä–∏–ª 2025 –≥–æ–¥–∏–Ω–∞. –û—Ç–≥–æ–≤–∞—Ä—è–π –º–∞–∫—Å–∏–º–∞–ª–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –∏ –∞–∫—Ç—É–∞–ª–Ω–æ."}
            ] + history,
            temperature=0.7,
            max_tokens=1500,
        )

        reply_text = response.choices[0].message.content
        history.append({"role": "assistant", "content": reply_text})
        user_context[chat_id] = history
        return reply_text
    except Exception as e:
        print("OpenAI error:", e)
        return "‚ö†Ô∏è *–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å GPT.*"

@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üå¶Ô∏è –ü–æ–ø–∏—Ç–∞–π –∑–∞ –≤—Ä–µ–º–µ—Ç–æ", callback_data="weather"))
    markup.add(InlineKeyboardButton("üí¨ –ì–æ–≤–æ—Ä–∏ —Å GPT", callback_data="chatgpt"))
    markup.add(InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â", callback_data="help"))
    bot.send_message(message.chat.id, "üåç *–î–æ–±—Ä–µ –¥–æ—à—ä–ª! –ò–∑–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –º–µ–Ω—é—Ç–æ:*", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    if call.data == "weather":
        user_context[chat_id] = [{"role": "system", "content": "awaiting_city"}]
        bot.send_message(chat_id, "‚úçÔ∏è *–ù–∞–ø–∏—à–∏ –∏–º–µ—Ç–æ –Ω–∞ –≥—Ä–∞–¥–∞, –∑–∞ –¥–∞ —Ç–∏ –¥–∞–º –ø—Ä–æ–≥–Ω–æ–∑–∞!*")
    elif call.data == "chatgpt":
        user_context[chat_id] = []
        bot.send_message(chat_id, "üí¨ *–ü–∏—à–∏ –º–∏ –≤—ä–ø—Ä–æ—Å –∏ —â–µ —Ç–∏ –æ—Ç–≥–æ–≤–æ—Ä—è –∫–∞—Ç–æ GPT-4!* ‚ú®")
    elif call.data == "help":
        bot.send_message(chat_id, "‚ÑπÔ∏è *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:*\n\nüå¶Ô∏è –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ–ø–∏—Ç–∞–π –∑–∞ –≤—Ä–µ–º–µ—Ç–æ' –∏ –Ω–∞–ø–∏—à–∏ –≥—Ä–∞–¥ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.\nüí¨ –ù–∞—Ç–∏—Å–Ω–∏ '–ì–æ–≤–æ—Ä–∏ —Å GPT', –∑–∞ –¥–∞ –º–∏ –∑–∞–¥–∞–¥–µ—à –≤—ä–ø—Ä–æ—Å.\n\n‚ú® *–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∫–∞–∫–≤–æ —Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–≤–∞!* ‚úçÔ∏è")

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if text.startswith("/"):
        bot.send_message(chat_id, "‚ùì *–ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–∞. –ò–∑–ø–æ–ª–∑–≤–∞–π –º–µ–Ω—é—Ç–æ /start ‚ú®")
        return

    context = user_context.get(chat_id, [])

    if context and context[0]["content"] == "awaiting_city":
        bot.send_chat_action(chat_id, 'typing')  # üî•
        reply = get_weather(text)
        bot.send_message(chat_id, reply)
        user_context[chat_id] = []
        return

    lowered = text.lower()

    if "–≤—Ä–µ–º–µ—Ç–æ –≤" in lowered:
        try:
            bot.send_chat_action(chat_id, 'typing')  # üî•
            city = lowered.split("–≤—Ä–µ–º–µ—Ç–æ –≤", 1)[1].strip().rstrip("?.,!")
            reply = get_weather(city)
            bot.send_message(chat_id, reply)
        except Exception as e:
            print("City parse error:", e)
            bot.send_message(chat_id, "‚ö†Ô∏è *–ú–æ–ª—è, –∑–∞–¥–∞–π –≤—ä–ø—Ä–æ—Å–∞ –æ—Ç–Ω–æ–≤–æ –ø–æ –ø—Ä–∞–≤–∏–ª–µ–Ω –Ω–∞—á–∏–Ω!*")
        return

    if lowered.startswith(("–∫–æ–π –µ", "–∫–∞–∫–≤–æ –µ", "–∫–æ–≥–∞ –µ", "–∫—ä–¥–µ –µ", "who is", "what is", "when is", "where is")):
        bot.send_chat_action(chat_id, 'typing')  # üî•
        wiki_info = search_wikipedia(text)
        if wiki_info:
            bot.send_message(chat_id, wiki_info)
            return

    if "—Ö–∞—Ä–∏" in lowered:
        bot.send_chat_action(chat_id, 'typing')  # üî•
        if "–∫–∞–∫–≤–æ –ø—Ä–∞–≤–∏—à" in lowered:
            bot.send_message(chat_id, "ü§ñ –†–∞–±–æ—Ç—è –Ω–µ—É–º–æ—Ä–Ω–æ, –∑–∞ –¥–∞ —Ç–∏ –ø–æ–º–∞–≥–∞–º! –ö–∞–∫–≤–æ —â–µ –ø–æ–∂–µ–ª–∞–µ—à?")
        elif "–∫—ä–¥–µ —Å–∏" in lowered:
            bot.send_message(chat_id, "üìç –í –¥–∏–≥–∏—Ç–∞–ª–Ω–∏—è —Å–≤—è—Ç —Å—ä–º, –≤–∏–Ω–∞–≥–∏ –¥–æ —Ç–µ–±! –ö–∞–∫–≤–æ –º–æ–≥–∞ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è?")
        elif "–∫–æ–π —Å–∏" in lowered:
            bot.send_message(chat_id, "üëã –ê–∑ —Å—ä–º –•–∞—Ä–∏ ‚Äî —Ç–≤–æ—è—Ç Telegram –ø–æ–º–æ—â–Ω–∏–∫, —Å–≤—ä—Ä–∑–∞–Ω —Å GPT-4! üöÄ")
        else:
            bot.send_message(chat_id, "üëã –ó–¥—Ä–∞–≤–µ–π! –ö–∞–∫–≤–æ –º–æ–≥–∞ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è –∑–∞ —Ç–µ–±?")
        return

    bot.send_chat_action(chat_id, 'typing')  # üî•
    reply = ask_gpt(chat_id, text)
    bot.send_message(chat_id, reply)

@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
    return {'ok': True}

@app.route("/")
def index():
    return "ü§ñ Bot is live! Use /webhook for Telegram updates."

import requests as rq

@app.route("/setwebhook", methods=["GET"])
def setwebhook_route():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url={WEBHOOK_URL}"
    try:
        res = rq.get(url)
        if res.status_code == 200 and res.json().get('ok'):
            return "‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!", 200
        else:
            print("Webhook error:", res.text)
            return "‚ùå –ù–µ—É—Å–ø–µ—Ö –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ webhook.", 500
    except Exception as e:
        print("Webhook exception:", e)
        return "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ webhook.", 500

if __name__ == "__main__":
    app.run()
