import os
import re
import requests
import wikipediaapi
from flask import Flask, request
from openai import OpenAI
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

app = Flask(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
WEBHOOK_URL = "https://web-production-f7800.up.railway.app/webhook"

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='Markdown')
client = OpenAI(api_key=OPENAI_API_KEY)

user_context = {}
GROUP_CHAT_ID = -1001234567890  # <-- —Å–º–µ–Ω–∏ —Å —Ä–µ–∞–ª–Ω–æ—Ç–æ ID –Ω–∞ –≥—Ä—É–ø–∞—Ç–∞

wiki_bg = wikipediaapi.Wikipedia(
    user_agent="Harrylive_73Bot/1.0 (https://t.me/Harrylive_73Bot)",
    language='bg'
)
wiki_en = wikipediaapi.Wikipedia(
    user_agent="Harrylive_73Bot/1.0 (https://t.me/Harrylive_73Bot)",
    language='en'
)

@bot.message_handler(commands=['getchatid'])
def get_chat_id(message):
    bot.reply_to(message, f"üÜî Chat ID: `{message.chat.id}`")

def detect_language(text):
    if re.search(r'[–∞-—è–ê-–Ø]', text):
        return 'bg'
    else:
        return 'en'

def search_wikipedia(query):
    lang = detect_language(query)
    wiki = wiki_bg if lang == 'bg' else wiki_en
    page = wiki.page(query)

    if page.exists():
        summary = page.summary
        if len(summary) > 500:
            summary = summary[:500] + "..."
        return f"üìö *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç Wikipedia:*\n\n{summary}"
    else:
        return None

def get_weather(city="Sofia"):
    if not city.strip():
        return "‚ö†Ô∏è *–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ –≤–∞–ª–∏–¥–Ω–æ –∏–º–µ –Ω–∞ –≥—Ä–∞–¥!*"
    url = f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{city}?unitGroup=metric&lang=bg&key={OPENWEATHER_API_KEY}&contentType=json"
    try:
        res = requests.get(url)
        if res.status_code != 200:
            print("Weather API error:", res.text)
            return "‚ö†Ô∏è *–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–µ–º–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ.*"
        data = res.json()
        if "days" not in data:
            return "‚ö†Ô∏è *–ù—è–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞ —Ç–æ–≤–∞ –º—è—Å—Ç–æ.*"
        day = data["days"][0]
        temp = day.get("temp")
        conditions = day.get("conditions", "").lower()
        humidity = day.get("humidity")

        icons = {
            "rain": "üåßÔ∏è", "overcast": "‚òÅÔ∏è", "cloud": "‚òÅÔ∏è",
            "clear": "‚òÄÔ∏è", "snow": "‚ùÑÔ∏è", "thunderstorm": "‚õàÔ∏è"
        }
        weather_icon = "üå°Ô∏è"
        for key, icon in icons.items():
            if key in conditions:
                weather_icon = icon
                break

        return f"{weather_icon} *–í –º–æ–º–µ–Ω—Ç–∞ –≤ {city} –µ {temp}¬∞C —Å {conditions}.*\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç: {humidity}%"
    except Exception as e:
        print("Weather API exception:", e)
        return "‚ö†Ô∏è *–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞.*"

def ask_gpt(chat_id, message_text):
    if not message_text.strip():
        return "‚ö†Ô∏è *–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Å—ä–æ–±—â–µ–Ω–∏–µ!*"
    try:
        history = user_context.get(chat_id, [])
        history.append({"role": "user", "content": message_text})
        history = history[-10:]

        response = client.chat.completions.create(
            model="gpt-4-turbo-2024-04-09",
            messages=[
                {"role": "system", "content": "–¢–∏ —Å–∏ Telegram –±–æ—Ç. –î–Ω–µ—Å –µ –∞–ø—Ä–∏–ª 2025 –≥–æ–¥–∏–Ω–∞. –û—Ç–≥–æ–≤–∞—Ä—è–π –º–∞–∫—Å–∏–º–∞–ª–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –∏ –∞–∫—Ç—É–∞–ª–Ω–æ."}
            ] + history,
            temperature=0.7,
            max_tokens=1500,
        )

        reply_text = response.choices[0].message.content
        history.append({"role": "assistant", "content": reply_text})
        user_context[chat_id] = history
        return reply_text
    except Exception as e:
        print("OpenAI error:", e)
        return "‚ö†Ô∏è *–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å GPT.*"

@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üå¶Ô∏è –ü–æ–ø–∏—Ç–∞–π –∑–∞ –≤—Ä–µ–º–µ—Ç–æ", callback_data="weather"))
    markup.add(InlineKeyboardButton("üí¨ –ì–æ–≤–æ—Ä–∏ —Å GPT", callback_data="chatgpt"))
    markup.add(InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â", callback_data="help"))
    bot.send_message(message.chat.id, "üåç *–î–æ–±—Ä–µ –¥–æ—à—ä–ª! –ò–∑–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –º–µ–Ω—é—Ç–æ:*", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    if call.data == "weather":
        user_context[chat_id] = [{"role": "system", "content": "awaiting_city"}]
        bot.send_message(chat_id, "‚úçÔ∏è *–ù–∞–ø–∏—à–∏ –∏–º–µ—Ç–æ –Ω–∞ –≥—Ä–∞–¥–∞, –∑–∞ –¥–∞ —Ç–∏ –¥–∞–º –ø—Ä–æ–≥–Ω–æ–∑–∞!*")
    elif call.data == "chatgpt":
        user_context[chat_id] = []
        bot.send_message(chat_id, "üí¨ *–ü–∏—à–∏ –º–∏ –≤—ä–ø—Ä–æ—Å –∏ —â–µ —Ç–∏ –æ—Ç–≥–æ–≤–æ—Ä—è –∫–∞—Ç–æ GPT-4!* ‚ú®")
    elif call.data == "help":
        bot.send_message(chat_id, "‚ÑπÔ∏è *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:*\n\nüå¶Ô∏è –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ–ø–∏—Ç–∞–π –∑–∞ –≤—Ä–µ–º–µ—Ç–æ', –∑–∞ –¥–∞ –ø–æ–ª—É—á–∏—à –ø—Ä–æ–≥–Ω–æ–∑–∞.\nüí¨ –ù–∞—Ç–∏—Å–Ω–∏ '–ì–æ–≤–æ—Ä–∏ —Å GPT', –∑–∞ –¥–∞ –ø–∏—Ç–∞—à AI –≤—ä–ø—Ä–æ—Å–∏.\nüìö –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–∑–ø—Ä–∞—Ç–∏ –¥—É–º–∞ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ –≤ Wikipedia!")

@bot.message_handler(commands=['post'])
def gpt_direct_post(message):
    if message.chat.type != 'private':
        bot.reply_to(message, "‚ùå –ò–∑–ø–æ–ª–∑–≤–∞–π —Ç–∞–∑–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–∞–º–æ –≤ –ª–∏—á–µ–Ω —á–∞—Ç.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        bot.reply_to(message, "‚ö†Ô∏è –ú–æ–ª—è, –Ω–∞–ø–∏—à–∏ —Ç–µ–º–∞! –ü—Ä–∏–º–µ—Ä: `/post –∑–¥—Ä–∞–≤–µ`")
        return

    topic = parts[1].strip()

    try:
        response = client.chat.completions.create(
            model="gpt-4-turbo-2024-04-09",
            messages=[
                {"role": "system", "content": "–¢–∏ —Å–∏ –∫—Ä–µ–∞—Ç–∏–≤–µ–Ω –ø–∏—Å–∞—Ç–µ–ª –Ω–∞ –ø–æ—Å—Ç–æ–≤–µ –∑–∞ —Å–æ—Ü–∏–∞–ª–Ω–∏ –º—Ä–µ–∂–∏. –ü–∏—à–∏ –ø–æ–∑–∏—Ç–∏–≤–µ–Ω, –≤–¥—ä—Ö–Ω–æ–≤—è–≤–∞—â –ø–æ—Å—Ç –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –∑–∞ –∑–∞–¥–∞–¥–µ–Ω–∞ —Ç–µ–º–∞. –ü–æ—Å—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –∫—Ä–∞—Ç—ä–∫, –º–æ—Ç–∏–≤–∏—Ä–∞—â –∏ —Å –µ–º–æ—Ç–∏–∫–æ–Ω–∏."},
                {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º–∞: {topic}"}
            ],
            temperature=0.8,
            max_tokens=300,
        )

        post_text = response.choices[0].message.content.strip()

        bot.send_message(GROUP_CHAT_ID, post_text, parse_mode='Markdown')
        bot.reply_to(message, "‚úÖ –ü–æ—Å—Ç—ä—Ç –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω –∏ –ø—É–±–ª–∏–∫—É–≤–∞–Ω –¥–∏—Ä–µ–∫—Ç–Ω–æ –≤ –≥—Ä—É–ø–∞—Ç–∞!")

    except Exception as e:
        print("GPT Post Error:", e)
        bot.reply_to(message, "‚ö†Ô∏è –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–µ.")

@bot.message_handler(func=lambda message: True)
def text_handler(message):
    chat_id = message.chat.id
    history = user_context.get(chat_id, [])

    if history and history[0]["content"] == "awaiting_city":
        city = message.text
        weather_info = get_weather(city)
        bot.send_message(chat_id, weather_info)
        user_context[chat_id] = []
    else:
        reply = ask_gpt(chat_id, message.text)
        if reply is None:
            reply = search_wikipedia(message.text) or "‚ùì *–ù–µ —É—Å–ø—è—Ö –¥–∞ –Ω–∞–º–µ—Ä—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.*"
        bot.send_message(chat_id, reply)

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Invalid content type', 403

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
