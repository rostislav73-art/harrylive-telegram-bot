import os
import requests
import openai
from flask import Flask, request
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

openai.api_key = OPENAI_API_KEY
app = Flask(__name__)

# üë• –†–∞–∑—Ä–µ—à–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
ALLOWED_USERS = [6255661181]  # –∑–∞–º–µ–Ω–∏ —Å —Ç–≤–æ—è chat_id

@app.route("/")
def home():
    return "Bot is live!"

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    print("üì© Telegram update:", data)

    if "message" in data:
        chat_id = data["message"]["chat"]["id"]
        text = data["message"].get("text", "")
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ: [{chat_id}] {text}")

        # üîí –ë–ª–æ–∫–∏—Ä–∞–π –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
        if chat_id not in ALLOWED_USERS:
            print(f"‚ùå –ë–ª–æ–∫–∏—Ä–∞–Ω: {chat_id}")
            return {"ok": True}

        try:
            response = openai.chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "user", "content": text}]
            )
            reply = response.choices[0].message.content.strip()
            print(f"ü§ñ –û—Ç–≥–æ–≤–æ—Ä –æ—Ç GPT: {reply}")
        except Exception as e:
            print("‚ùå OpenAI error:", e)
            reply = "‚ö†Ô∏è OpenAI –≥—Ä–µ—à–∫–∞"

        # üìù –ó–∞–ø–∏—Å –≤ –ª–æ–≥ —Ñ–∞–π–ª
        with open("logs.txt", "a", encoding="utf-8") as f:
            f.write(f"[{datetime.now()}] [{chat_id}] {text} ‚Üí {reply}\n")

        # üì§ –ò–∑–ø—Ä–∞—â–∞–Ω–µ –æ–±—Ä–∞—Ç–Ω–æ –∫—ä–º Telegram
        payload = {"chat_id": chat_id, "text": reply}
        headers = {"Content-Type": "application/json"}
        r = requests.post(API_URL, json=payload, headers=headers)
        print("‚úÖ Telegram —Å—Ç–∞—Ç—É—Å:", r.status_code, r.text)

    return {"ok": True}
